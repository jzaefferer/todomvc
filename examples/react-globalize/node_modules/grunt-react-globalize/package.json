{
  "name": "grunt-react-globalize",
  "version": "0.0.1-pre",
  "keywords": [
    "gruntplugin",
    "globalize",
    "react",
    "i18n",
    "bundle",
    "bundler",
    "cldr"
  ],
  "description": "I18n support for React applications using Globalize",
  "homepage": "https://github.com/rxaviers/grunt-react-globalize",
  "repository": {
    "type": "git",
    "url": "git://github.com/rxaviers/grunt-react-globalize.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rxaviers/grunt-react-globalize/blob/master/LICENSE-MIT"
    }
  ],
  "author": {
    "name": "Rafael Xavier de Souza",
    "email": "rxaviers@gmail.com",
    "url": "http://rafael.xavier.blog.br"
  },
  "main": "tasks/react-globalize.js",
  "scripts": {
    "test": "grunt"
  },
  "dependencies": {
    "react-globalize-compiler": "git+https://github.com/rxaviers/react-globalize-compiler#b0.0.1"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-dco": "0.0.3",
    "matchdep": "*"
  },
  "gitHead": "f58659d5cbbfd1bab53949d2c35df06d9e0fd5a1",
  "readme": "> I18n support for React applications using Globalize.\n\n## Getting Started\nThis plugin requires Grunt `>=0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-react-globalize --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-react-globalize');\n```\n\n## React Globalize task\n_Run this task with the `grunt react-globalize` or `grunt react-globalize:extract` command._\n\nTask options may be specified according to the grunt [Configuring tasks]() guide.\n\nTODO\n\n### Options\n\nThis task primarily delegates to [React Globalize][], so please consider the [React Globalize documentation][] as required reading for advanced configuration.\n\n[React Globalize]: https://github.com/rxaviers/react-globalize\n[React Globalize documentation]: http://github.com/rxaviers/react-globalize/#README\n\n\n#### mangle\nType: `Boolean` `Object`  \nDefault: `{}`\n\nTurn on or off mangling with default options. If an `Object` is specified, it is passed directly to `ast.mangle_names()` *and* `ast.compute_char_frequency()` (mimicking command line behavior). [View all options here](https://github.com/mishoo/UglifyJS2#mangler-options).\n\n#### compress\nType: `Boolean` `Object`  \nDefault: `{}`\n\nTurn on or off source compression with default options. If an `Object` is specified, it is passed as options to `UglifyJS.Compressor()`. [View all options here](https://github.com/mishoo/UglifyJS2#compressor-options).\n\n#### beautify\nType: `Boolean` `Object`  \nDefault: `false`\n\nTurns on beautification of the generated source code. An `Object` will be merged and passed with the options sent to `UglifyJS.OutputStream()`. [View all options here](https://github.com/mishoo/UglifyJS2#beautifier-options)\n\n###### expression\nType: `Boolean`  \nDefault: `false`\n\nParse a single expression, rather than a program (for parsing JSON)\n\n#### report\nChoices: `'min'`, `'gzip'`  \nDefault: `'min'`\n\nEither report only minification result or report minification and gzip results.\nThis is useful to see exactly how well clean-css is performing but using `'gzip'` will make the task take 5-10x longer to complete. [Example output](https://github.com/sindresorhus/maxmin#readme).\n\n#### sourceMap\nType: `Boolean`  \nDefault: `false`\n\nIf `true`, a source map file will be generated in the same directory as the `dest` file. By default it will have the same basename as the `dest` file, but with a `.map` extension.\n\n#### sourceMapName\nType: `String`  `Function`  \nDefault: `undefined`\n\nTo customize the name or location of the generated source map, pass a string to indicate where to write the source map to. If a function is provided, the uglify destination is passed as the argument and the return value will be used as the file name.\n\n#### sourceMapIn\nType: `String`  `Function`  \nDefault: `undefined`\n\nThe location of an input source map from an earlier compilation, e.g. from CoffeeScript. If a function is provided, the\nuglify source is passed as the argument and the return value will be used as the sourceMap name. This only makes sense\nwhen there's one source file.\n\n#### sourceMapIncludeSources\nType: `Boolean`  \nDefault: `false`\n\nPass this flag if you want to include the content of source files in the source map as sourcesContent property.\n\n###### sourceMapRoot\nType: `String`  \nDefault: `undefined`\n\nWith this option you can customize root URL that browser will use when looking for sources.\n\nIf the sources are not absolute URLs after prepending of the `sourceMapRoot`, the sources are resolved relative to the source map.\n\n###### enclose\nType: `Object`  \nDefault: `undefined`\n\nWrap all of the code in a closure with a configurable arguments/parameters list.\nEach key-value pair in the `enclose` object is effectively an argument-parameter pair.\n\n#### wrap\nType: `String`  \nDefault: `undefined`\n\nWrap all of the code in a closure, an easy way to make sure nothing is leaking.\nFor variables that need to be public `exports` and `global` variables are made available.\nThe value of wrap is the global variable exports will be available as.\n\n#### maxLineLen\nType: `Number`  \nDefault: `32000`\n\nLimit the line length in symbols. Pass maxLineLen = 0 to disable this safety feature.\n\n#### ASCIIOnly\nType: `Boolean`  \nDefault: `false`\n\nEnables to encode non-ASCII characters as \\uXXXX.\n\n#### exportAll\nType: `Boolean`  \nDefault: `false`\n\nWhen using `wrap` this will make all global functions and variables available via the export variable.\n\n#### preserveComments\nType: `Boolean` `String` `Function`  \nDefault: `undefined`  \nOptions: `false` `'all'` `'some'`\n\nTurn on preservation of comments.\n\n- `false` will strip all comments\n- `'all'` will preserve all comments in code blocks that have not been squashed or dropped\n- `'some'` will preserve all comments that start with a bang (`!`) or include a closure compiler style directive (`@preserve` `@license` `@cc_on`)\n- `Function` specify your own comment preservation function. You will be passed the current node and the current comment and are expected to return either `true` or `false`\n\n#### banner\nType: `String`  \nDefault: empty string\n\nThis string will be prepended to the minified output.  Template strings (e.g. `<%= config.value %>` will be expanded automatically.\n\n#### footer\nType: `String`  \nDefault: empty string\n\nThis string will be appended to the minified output.  Template strings (e.g. `<%= config.value %>` will be expanded automatically.\n\n#### screwIE8\nType: `Boolean`  \nDefault: false\n\nPass this flag if you don't care about full compliance with Internet Explorer 6-8 quirks.\n\n#### mangleProperties\nType: `Boolean`  \nDefault: false\n\nUse this flag to turn on object property name mangling.\n\n#### reserveDOMProperties\nType: `Boolean`  \nDefault: false\n\nUse this flag in conjunction with `mangleProperties` to prevent built-in browser object properties from being mangled.\n\n#### exceptionsFiles\nType: `Array`  \nDefault: []\n\nUse this with `mangleProperties` to pass one or more JSON files containing a list of variables and object properties\nthat should not be mangled. See the [UglifyJS docs](https://www.npmjs.com/package/uglify-js) for more info on the file syntax.\n\n#### nameCache\nType: `String`  \nDefault: empty string\n\nA string that is a path to a JSON cache file that uglify will create and use to coordinate symbol mangling between\nmultiple runs of uglify. Note: this generated file uses the same JSON format as the `exceptionsFiles` files.\n\n#### quoteStyle\nType: `Integer`  \nDefault: `0`\n\nPreserve or enforce quotation mark style.\n\n* `0` will use single or double quotes such as to minimize the number of bytes (prefers double quotes when both will do)\n* `1` will always use single quotes\n* `2` will always use double quotes\n* `3` will preserve original quotation marks\n\n### Usage examples\n\n#### Basic compression\n\nThis configuration will compress and mangle the input files using the default options.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input1.js', 'src/input2.js']\n      }\n    }\n  }\n});\n```\n\n#### No mangling\n\nSpecify `mangle: false` to prevent changes to your variable and function names.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    options: {\n      mangle: false\n    },\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Reserved identifiers\n\nYou can specify identifiers to leave untouched with an `except` array in the `mangle` options.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    options: {\n      mangle: {\n        except: ['jQuery', 'Backbone']\n      }\n    },\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Source maps\n\nGenerate a source map by setting the `sourceMap` option to `true`. The generated\nsource map will be in the same directory as the destination file. Its name will be the\nbasename of the destination file with a `.map` extension. Override these\ndefaults with the `sourceMapName` attribute.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    my_target: {\n      options: {\n        sourceMap: true,\n        sourceMapName: 'path/to/sourcemap.map'\n      },\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Advanced source maps\n\nSet the `sourceMapIncludeSources` option to `true` to embed your sources directly into the map. To include\na source map from a previous compilation pass it as the value of the `sourceMapIn` option.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    my_target: {\n      options: {\n        sourceMap: true,\n        sourceMapIncludeSources: true,\n        sourceMapIn: 'example/coffeescript-sourcemap.js', // input sourcemap from a previous compilation\n      },\n      files: {\n        'dest/output.min.js': ['src/input.js'],\n      },\n    },\n  },\n});\n```\n\nRefer to the [UglifyJS SourceMap Documentation](http://lisperator.net/uglifyjs/codegen#source-map) for more information.\n\n#### Turn off console warnings\n\nSpecify `drop_console: true` as part of the `compress` options to discard calls to `console.*` functions.\nThis will supress warning messages in the console.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    options: {\n      compress: {\n        drop_console: true\n      }\n    },\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Beautify\n\nSpecify `beautify: true` to beautify your code for debugging/troubleshooting purposes.\nPass an object to manually configure any other output options passed directly to `UglifyJS.OutputStream()`.\n\nSee [UglifyJS Codegen documentation](http://lisperator.net/uglifyjs/codegen) for more information.\n\n_Note that manual configuration will require you to explicitly set `beautify: true` if you want traditional, beautified output._\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    my_target: {\n      options: {\n        beautify: true\n      },\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    },\n    my_advanced_target: {\n      options: {\n        beautify: {\n          width: 80,\n          beautify: true\n        }\n      },\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Banner comments\n\nIn this example, running `grunt uglify:my_target` will prepend a banner created by interpolating the `banner` template string with the config object. Here, those properties are the values imported from the `package.json` file (which are available via the `pkg` config property) plus today's date.\n\n_Note: you don't have to use an external JSON file. It's also valid to create the `pkg` object inline in the config. That being said, if you already have a JSON file, you might as well reference it._\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  pkg: grunt.file.readJSON('package.json'),\n  uglify: {\n    options: {\n      banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +\n        '<%= grunt.template.today(\"yyyy-mm-dd\") %> */'\n    },\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Conditional compilation\n\nYou can also enable UglifyJS conditional compilation. This is commonly used to remove debug code blocks for production builds.\n\nSee [UglifyJS global definitions documentation](http://lisperator.net/uglifyjs/compress#global-defs) for more information.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    options: {\n      compress: {\n        global_defs: {\n          \"DEBUG\": false\n        },\n        dead_code: true\n      }\n    },\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Compiling all files in a folder dynamically\n\nThis configuration will compress and mangle the files dynamically.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    my_target: {\n      files: [{\n          expand: true,\n          cwd: 'src/js',\n          src: '**/*.js',\n          dest: 'dest/js'\n      }]\n    }\n  }\n});\n```\n\n#### Turn on object property name mangling\n\nThis configuration will turn on object property name mangling, but not mangle built-in browser object properties.\nAdditionally, variables and object properties listed in the `myExceptionsFile.json` will be mangled. For more info,\non the format of the exception file format please see the [UglifyJS docs](https://www.npmjs.com/package/uglify-js).\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    options: {\n      mangleProperties: true,\n      reserveDOMCache: true,\n      exceptionsFiles: [ 'myExceptionsFile.json' ]\n    },\n    my_target: {\n      files: {\n        'dest/output.min.js': ['src/input.js']\n      }\n    }\n  }\n});\n```\n\n#### Turn on use of name mangling cache\n\nTurn on use of name mangling cache to coordinate mangled symbols between outputted uglify files. uglify will the\ngenerate a JSON cache file with the name provided in the options. Note: this generated file uses the same JSON format\nas the `exceptionsFiles` files.\n\n```js\n// Project configuration.\ngrunt.initConfig({\n  uglify: {\n    options: {\n      nameCache: '.tmp/grunt-uglify-cache.json',\n    },\n    my_target: {\n      files: {\n        'dest/output1.min.js': ['src/input1.js'],\n        'dest/output2.min.js': ['src/input2.js']\n      }\n    }\n  }\n});\n```\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/rxaviers/grunt-react-globalize/issues"
  },
  "_id": "grunt-react-globalize@0.0.1-pre",
  "_shasum": "cc39efe330925946168bb528a0221f5a5ccc251e",
  "_from": "../../../../../../../../tmp/npm-4295-488aa0f1/git-cache-33c2b034cad3/f58659d5cbbfd1bab53949d2c35df06d9e0fd5a1",
  "_resolved": "git+https://github.com/rxaviers/grunt-react-globalize#f58659d5cbbfd1bab53949d2c35df06d9e0fd5a1"
}
